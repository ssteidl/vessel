# -*- mode: tcl; indent-tabs-mode: nil; tab-width: 4; -*-

package require vessel::env
package require logger
package require vessel::network
package require vessel::test::testconstraints
package require tcltest

namespace eval network::test {
	namespace import ::tcltest::*

	test {create-bridge} {Test that we can create a bridge without an inet interface} -constraints {
          root  
	} -setup {
	    
	    #Delete the vessel bridge if it exists
	    catch {exec ifconfig vessel destroy}
	} -body {
	 
	    vessel::network::bridge::create_bridge {}
	} -cleanup {
	  catch {exec ifconfig vessel destroy}  
	} -result true
	
	test {create-bridge-internet} {Test that we can create a bridge and attach a nic} -constraints {
            root  
	} -setup {
	 
	    catch {exec ifconfig vessel destroy}
	} -body {
	     vessel::network::bridge::create_bridge {em0}
	     
	     set bridge_outut [exec ifconfig vessel]
	    
	} -cleanup {
	    catch {ifconfig vessel destroy}
	} -match glob -result "*member: em0*"
	
	test {router-exists-1} {Check if a router exists} -body {
	    vessel::network::router::router_image_exists?
	} -result 0
	
        test {epair-create-test} {Test that we can create an epair} -constraints {
          root  
        } -setup {
            set name "vrouter2"
            
            vessel::network::epair::destroy $name
        } -body {
            vessel::network::epair::create $name
            vessel::network::epair::exists? $name
        } -cleanup {
            vessel::network::epair::destroy $name
        } -result true
    
        test {build-router-image-1} {Test that we can build a router image} -constraints {
           root
        } -setup {
        
            set ifacename "testiface"
            set env(VESSEL_POOL) "zroot/vessel-test"
            vessel::network::epair::create $ifacename
        } -body {
            vessel::network::router::build_image $ifacename
            vessel::network::router::router_image_exists?
        } -cleanup {
            #Destroy the image
            vessel::network::epair::destroy $ifacename
            exec vessel image --rm "${vessel::network::router::router_image_name}:${vessel::network::router::router_tag}"
            set env(VESSEL_POOL) {}
        } -result 1
    
        test {router-run-ini-template-1} {Test that the ini file is generated correctly} -body {
            
            vessel::network::router::generate_run_ini "shanenet" 2
        } -result {
[vessel-supervisor]
image=vessel-router
tag=1.0.0

[jail]
devfs_ruleset=60100
host.hostname=shanenet2-gw}
    
        #This test will need to be an integration test because the router::start command blocks
        test {router-start-1} {Test that the router jail can be started} -constraints {
            root
        } -setup {
            set ifacename "testiface"
            set env(VESSEL_POOL) "zroot/vessel-test"
            vessel::network::epair::create $ifacename
            vessel::network::router::build_image $ifacename
        } -body {
            #TODO: This hangs.  We need to just run jail instead of runnign vessel
            vessel::network::router::start "shanenet" 2
        } -cleanup {
            #Destroy the image
            vessel::network::epair::destroy $ifacename
            exec vessel image --rm "${vessel::network::router::router_image_name}:${vessel::network::router::router_tag}"
            set env(VESSEL_POOL) {}
        } -result joe
    
	cleanupTests
}