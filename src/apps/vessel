#!/usr/bin/env tclsh8.6
# -*- mode: tcl; indent-tabs-mode: nil; tab-width: 4; -*-
# vim: set ft=tcl
package require vessel::build
package require vessel::env
package require vessel::export
package require vessel::native
package require vessel::import
package require vessel::metadata_db
package require vessel::repo
package require vessel::run
package require vessel::zfs

package require debug
package require defer

package require fileutil

debug define vessel
debug on vessel 1 stderr

set options [vessel::parse_options $argv]

set command [dict get $options command]
set args [dict get $options args]

if {[dict exists $args help]} {
    puts stderr [dict get $args help]
    exit 0
}

set pool [vessel::env::get_pool]
if {![vessel::zfs::is_mounted $pool]} {
    puts stderr "ZFS pool '$pool' is not mounted.  Attempting to mount now"
    if {[catch {vessel::zfs::mount $pool} msg]} {
        puts stderr "Failed to mount pool: ${msg}.  Moving on..."
    }
}

if {![vessel::bsd::is_mountpoint /proc]} {
    debug.vessel "Mounting /proc"
    vessel::bsd::mount_procfs
}

#Make the runtime directories.
file mkdir [vessel::env::vessel_run_dir]
file mkdir [vessel::env::jail_confs_dir]

set run_done_flag [expr false]

parray env

set ctrl_channel {}
if {[info exists env(VESSEL_CTRL_FD)]} {
    set ctrl_channel [vessel::get_supervisor_ctrl_channel]
}

puts stderr "ctrl channel: $ctrl_channel"
puts $ctrl_channel "Testing ctrl channel"
flush $ctrl_channel
#TODO: This belongs in the 'vessel init' command whenever
# we decide to implement that..
proc create_workdir {} {

    set workdir [vessel::env::get_workdir]
    if {![file exists $workdir]} {
        file mkdir $workdir
        file mkdir [file join $workdir local_repo]
        file mkdir [file join $workdir db]
        file mkdir [file join $workdir downloaded_images]
    }
}

proc run_container_coro {options} {
    global run_done_flag

    set interactive [dict get $options args interactive]
    
    #Initialization yield
    yield
    
    if {$interactive} {
        set chan_dict [dict create stdin stdin stdout stdout stderr stderr]
    } else {
        set devnull [open /dev/null w]
        set chan_dict [dict create stdin $devnull stdout stdout stderr stderr]
        defer::with [list devnull] {
            close $devnull
        }
    }

    #Setup and yieldto the run coroutine.  It will callback this coroutine after exiting
    coroutine runcoro vessel::run::run_command $chan_dict [dict get $options args] \
        [info coroutine]
    yieldto runcoro
    set run_done_flag [expr true]
}

proc handle_repo_cmd {cmd args_dict} {

    debug.vessel "repo args: $args_dict"
    set image [dict get $args_dict image]

    set tag [dict get $args_dict tag]
    if {$tag eq {}} {
        set tag {latest}
    }

    set repo [vessel::repo::repo_factory [vessel::env::get_repo_url]]
    defer::with [list repo] {
        $repo destroy
    }

    set downloaddir [vessel::env::image_download_dir]
    
    switch -exact $cmd {

        publish {
            #NOTE: We may want to make export directories something separate
            #from download directories.  For now, we'll keep it separate.
            #
            #vessel publish --tag=local kafka
            set image_file [vessel::export::export_image $image $tag $downloaddir]
            if {![$repo image_exists $image $tag]} {
                $repo put_image $image_file
            }
        }
        pull {
            #Pulls the command.  Basically a GET and an import.
            $repo pull_image $image $tag $downloaddir
            vessel::import::import $image $tag $downloaddir stderr
        }
    }
}

create_workdir

switch -regexp -matchvar parsed_cmd $command {

    build {
        #Building creates the image as a tagged dataset.
        #TODO: currently it doesn't tag the dataset
        vessel::build::build_command $args stderr
    }
    run {
        #Create a new container from a tagged dataset.
        set interactive [dict get $args interactive]
        coroutine toplevel_run_coro run_container_coro $options
        after idle toplevel_run_coro
        vwait run_done_flag
    }
    publish|pull {
        debug.vessel "push pull args: $args"
        handle_repo_cmd $parsed_cmd $args
    }
    image {
        vessel::metadata_db::image_command $args
    }
    export {
        vessel::export::export_command $args
    }
    default {
        puts stderr "Unknown command: $command"
        exit 1
    }

    exit 0
}
