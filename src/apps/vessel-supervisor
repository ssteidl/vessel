#! /usr/local/bin/tclsh8.6
# -*- mode: tcl; indent-tabs-mode: nil; tab-width: 4; -*-

package require cmdline
package require inifile

package require vessel::native
package require vessel::deploy
package require vessel::metadata_db
package require vessel::syslog
package require dicttool

package require logger


set log [logger::init vessel-supervisor]
logger::setlevel info

proc bgerror {message} {
    global errorInfo
    global errorCode
    global log

    ${log}::error "bgerror: $message, $errorInfo, $errorCode"
}

namespace eval vessel::supervisor {

    namespace eval mc {
        namespace ensemble create
        namespace export container_key \
            get_active_deploy_files \
            get_deploy_dict \
            get_container_name \
            get_coro_name \
            is_monitored \
            monitor_container \
            stop_monitor_container \
            add_ctrl_channel \
            ctrl_channel \
            update_deploy_dict


        #Array of containers that we are monitoring.
        #The keys are as follows:
        # key == deployment file basename.  This key is never set in the array
        # key,ini == Parsed ini file cached.  This can be used to see if we are already monitoring a container.
        # key,coro == The name of the monitored coroutine.  At some point this will be useful when we support multiple instances
        variable _containers
        array set _containers {}

        proc container_key {deploy_file} {
            return [file tail [file rootname ${deploy_file}]]
        }

        proc get_active_deploy_files {} {
            
            variable _containers
            set deploy_files {}
            foreach {key deploy_file} [array get _containers "*,file"] {
                lappend deploy_files $deploy_file
            }

            return $deploy_files
        }

        #Checks if a cached deploy dict exists if so returns it.
        #Otherwise parse and cache the deploy_file into a deploy_dict
        #and return it.
        proc get_deploy_dict {deploy_file {cache true}} {
            variable _containers
            set key [container_key $deploy_file]
            if {[info exists _containers($key,ini)]} {
                return $_containers($key,ini)
            }

            set deploy_dict [vessel::deploy::ini::get_deployment_dict $deploy_file]
            if {$cache} {
                set _containers($key,ini) $deploy_dict
            }
            return $deploy_dict
        }

        #Used to invalidate the deploy file when changes have
        #been detected
        proc update_deploy_dict {deploy_file} {
            variable _containers
            set key [container_key $deploy_file]
            if {[info exists _containers($key,ini)]} {
                unset _containers($key,ini)
            }

            #Re-add the ini key with a newly parsed value.
            return [get_deploy_dict $deploy_file]
        }

        #Given the deployment file get the name for the container.
        # The container name either comes from the ini file or if that
        # doesn't exist we use the basename of the ini file.
        proc get_container_name {deploy_file} {
            variable _containers
            set key [container_key $deploy_file]
            set deploy_dict [get_deploy_dict $deploy_file]

            set container_name [dict getnull $deploy_dict vessel-supervisor name]
            if {$container_name eq {}} {
                set container_name $key
            }

            return $container_name
        }

        proc get_coro_name {deploy_file} {

            return "monitor-[container_key $deploy_file]"            
        }

        proc is_monitored {deploy_file} {
            variable _containers
            set key [container_key $deploy_file]
            return [info exists _containers($key,coro)]
        }

        proc monitor_container {deploy_file} {
            variable _containers

            if {[is_monitored $deploy_file]} {
                error "The container is already being monitored: [get_container_name $deploy_file]"
            }

            set key [container_key $deploy_file]
            set coro_name [get_coro_name $deploy_file]
            set _containers($key,coro) $coro_name
            set _containers($key,file) $deploy_file
            update_deploy_dict $deploy_file
            return [get_deploy_dict $deploy_file]
        }

        proc stop_monitor_container {deploy_file} {
            variable _containers
            set key [container_key $deploy_file]
            if {[is_monitored $deploy_file]} {
                array unset _containers "$key,*"
            }
        }

        proc add_ctrl_channel {deploy_file ctrl_chan} {
            variable _containers
            set key [container_key $deploy_file]

            set _containers($key,ctrlchan) $ctrl_chan
        }

        proc ctrl_channel {deploy_file} {
            variable _containers
            set key [container_key $deploy_file]

            if {[is_monitored $deploy_file]} {
                error "Attempted to retrieve control channel for unmonitored container"
            }

            if {![info exists _containers($key,ctrlchan)]} {
                error "Attempted to retrieve control channel on monitored container before it is set: $key"
            }

            return _containers($key,ctrlchan)
        }
    }

    # Monitors the ctrl_channel for control messages from a given container.
    proc msg_loop_coro {container_name ctrl_channel msg_callback exit_callback} {
        global log

        ${log}::debug "Configuring run_loop($ctrl_channel)"
        chan configure $ctrl_channel -blocking false -buffering none

        chan event $ctrl_channel readable [list [info coroutine] "ctrl_read"]

        while {true} {
            
            #Yield until an event is received
            set event_type [yield]

            switch -exact $event_type {
                "ctrl_read" {
                    #NOTE: Currently we don't expect any messages but we can in the future.
                    set msg {}
                    gets $ctrl_channel msg
                    if {[eof $ctrl_channel]} {
                        #ctrl_channel closed.  Assume the process exited.
                        close $ctrl_channel
                        ${log}::debug "Closed ctrl_channel($container_name)"

                        if {$exit_callback ne {}} {                        
                            after idle [list {*}$exit_callback "ctrl_closed"]
                        }
                        break
                    } elseif {![fblocked $ctrl_channel]} {
                        if {$msg_callback ne {}} {
                            after idle [list {*}$msg_callback $msg "ctrl_msg"]
                        }
                    }
                }
                default {
                    ${log}::warn "Unknown event received for run loop($container_name): $event_type"
                }
            }
        } 

        ${log}::debug "Exiting run_loop($container_name)"
    }

    #Start a container by using the vessel::exec procedure to setup and invoke
    #vessel.  All of the exec lifecycle events will be sent to the callback_coro
    proc start_container {deploy_file_path image tag callback_coro} {
        global log

        set deploy_dict [mc get_deploy_dict $deploy_file_path]
        set command [dict get $deploy_dict vessel-supervisor command]

        set jail_name [mc get_container_name $deploy_file_path]
        #NOTE: We might want to implement a detach or keep-attached option.  The difference
        #is really signal processing when running the supervisor in the foreground.
        set vessel_cmd "daemon vessel --no-annotate-log run --name=${jail_name} --ini=${deploy_file_path} ${image}:${tag}"
        lappend vessel_cmd {*}$command
        ${log}::debug "$vessel_cmd"

        # Create a pipe to forward stdout and stderr
        set pipe_list [chan pipe]
        set read_side [lindex $pipe_list 0]
        set write_side [lindex $pipe_list 1]
        ::defer::with {write_side} {
            #The child process has been forked before the procedure exits. Therefore,  
            #We can close the write side.
            close $write_side
        }
        set chan_dict [dict create stdin stdin stdout $write_side stderr $write_side]

        dict set monitored_containers_dict $jail_name $deploy_dict

        # Execute the vessel command.  vessel::exec will send lifecycle events to the
        # coroutine.
        vessel::exec $chan_dict [list {*}$callback_coro $jail_name $read_side] {*}${vessel_cmd}
    }

    #Forward data from pipe (generally stdout of a child process) to the logging system.
    proc forward_logs_coro {pipe ident} {
        
        set log [::logger::init ::vessel-supervisor::${ident}]
        defer::with {log ident} {
            ${log}::debug "Exiting forward_logs_coro($ident)"
            ${log}::delete
        }

        #Configure the channel to read raw bytes without buffering.  No translation needed
        chan configure $pipe -blocking 0 -buffering none -translation binary
        
        #Call this coroutine anytime data is available
        fileevent $pipe readable [info coroutine]

        while {true} {

            yield

            #Read all available bytes
            set data [read $pipe]
            if {[eof $pipe]} {
                    
                ${log}::debug "log forwarding pipe closed"
                
                #Eof on pipe means time to close and exit the coroutine.
                close $pipe
                break
            } else {
                try {
                    vessel::syslog::set_ident $ident
                    ${log}::info $data
                } finally {
                    #Reset the log ident
                    vessel::syslog::set_ident {}
                }
            }
	    }
    }

    #Handle the container started event by configuring the ctrl channel
    #provided in the event and starting the msg_loop coroutine for the container.
    proc container_started {event deploy_file} {
        #Expected Event format as configured from start_container: 
        # <jail_name> <read_pipe> start <ctrl_pipe>

        if {[llength $event] < 4 || [lindex $event end-1] ne "start"} {
            error "Unexpected event while waiting for container to start: $event"
        }
        set ctrl_channel [lindex $event end]
        set jail_name [lindex $event 0]
        
        set child_stdout [lindex $event 1]
        
        mc monitor_container $deploy_file
        set coro_name [mc get_coro_name $deploy_file]

        #Create the output forwarding coroutine.  It will exit when the pipe closes.
        coroutine "${coro_name}-stdout" forward_logs_coro $child_stdout $jail_name
        
        coroutine "msg_loop_${coro_name}" msg_loop_coro $jail_name $ctrl_channel [info coroutine] {}
        return $ctrl_channel
    }

    #The main event processing coroutine for a container.
    proc container_coro {deploy_file main_coro} {
        global log
        variable monitored_containers_dict

        ::defer::with {deploy_file} {
            vessel::supervisor::mc stop_monitor_container $deploy_file
        }

        set container_name [mc get_container_name $deploy_file]
        ${log}::debug "starting container: $container_name"
        set deploy_dict [mc get_deploy_dict $deploy_file]
        ${log}::debug stderr "deploy dict: $deploy_dict"
        set image [dict get $deploy_dict vessel-supervisor image]
        set tag [dict get $deploy_dict vessel-supervisor tag]

        #initialization yield
        yield
        
        if {![vessel::metadata_db::image_exists $image $tag]} {

            #Image doesn't exist.  We need to pull it from the repository
            return -code error -errorcode {SUPERVISOR PULL NYI} "Supervisor pull NYI"
        }

        set container_started_event [yieldto start_container $deploy_file $image $tag  [info coroutine]]

        ${log}::debug "Container started event: $container_started_event"

        set ctrl_channel [container_started $container_started_event $deploy_file]

        set restart false
        set exited false
        #container monitoring event loop
        while {true} {

            #Wait for next event
            set event_args [yieldto return -level 0]
            if {[llength $event_args] < 1} {
                ${log}::warn "Event with no event_type received"
                continue
            }      
            set event_type [lindex $event_args end]
            ${log}::debug "eventargs: $event_args"
            switch -exact $event_type {
                
                "ctrl_msg" {
                    set msg [lindex $event_args 1]
                    ${log}::debug "control message received: $msg"
                }
                "ctrl_closed" {
                    ${log}::debug "Unexpected ctrl_closed found"
                }
                "stop_requested" {
                    puts $ctrl_channel "stop"
                }
                "restart_requested" {
                    puts $ctrl_channel "stop"
                    set restart true
                }
                "exit" {
                    set exited true
                }
                default {
                    ${log}::warn "Unexpected event when monitoring container: $event_args"
                }
            }
            if {$exited} {
                break
            }
        }

        ${log}::info "$container_name finished executing.  Cleaning up..."

        if {$restart} {
            ${log}::info "Restarting($container_name)"
            after idle [list [namespace current]::poll_start $deploy_file]
        } else {
            ${log}::debug "No restart requested"
        }
    }

    # Periodically poll the deployment dir
    # and apply the changes to the managed containers.  
    # Start, Stop or Restart the containers.
    proc poll_deploy_dir {_deploy_dir event_callback} {
        
        # The path must be normalized when calling deploy::deploy_dir
        set deploy_dir [file normalize $_deploy_dir]

        set changed_dict [vessel::deploy::poll_deploy_dir $deploy_dir]

        #Queue up the containers that need to be 
        foreach deploy_file [dict getnull $changed_dict "start"] {
            #TODO: make a queue or figure out how to do this synchronously (probably another coroutine).  We don't
            #want to be starting some containers while the same container is still starting.
            #There needs to be some safe guards in place.

            after idle [list {*}$event_callback poll_start $deploy_file]
        }

        foreach deploy_file [dict getnull $changed_dict "stop"] {
            after idle [list {*}$event_callback poll_stop $deploy_file]
        }

        foreach deploy_file [dict getnull $changed_dict "modified"] {
            mc update_deploy_dict $deploy_file
            after idle [list {*}$event_callback poll_modified $deploy_file]
        }
    }

    # Creates a container monitoring coroutine
    proc poll_start {deploy_file} {
        global log

        set container_coro_name [mc get_coro_name $deploy_file]
        set deploy_dict [mc get_deploy_dict $deploy_file]
        set start_delay [dict getnull $deploy_dict {vessel-supervisor} {start-delay-ms}]
        
        if {$start_delay eq {}} {
            ${log}::debug "No restart delay found.  Setting to immediate"
            set start_delay {idle}
        } else {
            ${log}::debug "restart delay found.  Delaying start for: $start_delay"
        }

        coroutine  $container_coro_name container_coro $deploy_file [info coroutine]
        after $start_delay [list vessel::supervisor::$container_coro_name ${deploy_file}]
    }

    proc poll_stop {deploy_file} {

        set coro_name [mc get_coro_name $deploy_file]
        $coro_name "stop_requested"
    }

    proc poll_modified {deploy_file} {
        global log
        set coro_name [mc get_coro_name $deploy_file]

        try {
            $coro_name "restart_requested"
        } trap {TCL LOOKUP COMMAND} {} {
            ${log}::warn "$coro_name not found... starting the container"
            tailcall poll_start $deploy_file
        }
    }

    proc poll_timer {deploy_dir} {
        after idle [list vessel::supervisor::poll_deploy_dir $deploy_dir [info coroutine]]
    }

    proc start_poll_timer {deploy_dir} {
        after 2000 [list [info coroutine] poll_timer $deploy_dir]
    }

    proc signal_received {signal active_pid_groups} {
        global log

        set deploy_files [mc get_active_deploy_files]
        if {[llength $deploy_files] > 0} {
            ${log}::info "Stopping deploy files: $deploy_files"
        } else {
            ${log}::info "No jails running"
        }

        foreach deploy_file $deploy_files {
            poll_stop $deploy_file
        }

        if {$signal eq "TERM"} {
            ${log}::info "Exiting due to SIGTERM.  Jails may still be shutting down"
            exit 0
        }
    }

    #Highest level coroutine, manages the polling of the deployment directory.
    proc main_event_loop_coro {deploy_dir} {
        global log

        #Initialization yield
        yield

        #Signal handler to intelligently shutdown jails from received signals.
        vessel::exec_set_signal_handler [list [info coroutine] "signal_received"]

        while {true} {
            start_poll_timer $deploy_dir
            
            set event_args [yieldto return -level 0]
            if {[llength $event_args] <= 0} {
                ${log}::debug "Ignoring event without event type"
                continue
            }

            #Add the main coroutine so sub-coroutines can generate events on the main coroutine
            switch -exact [lindex $event_args 0] {

                "poll_timer" -
                "poll_start" -
                "poll_stop" -
                "poll_modified" -
                "signal_received" {
                    try {
                        {*}$event_args
                    } trap {} {msg o} {
                        ${log}::warn $msg
                        ${log}::debug "Caught error in main even loop.... ignoring"
                    }
                }

                default {
                    ${log}::debug "Unexpected event type: $event_args"
                }
            }
        }
    }
}


set options {
    {d.arg "/usr/local/etc/vessel/configs"   "deployment file directory to monitor"}
    {debug}
    {syslog}
}
set usage ":  \[options] filename ...\noptions:"

try {
    array set params [::cmdline::getoptions argv $options $usage]
} trap {CMDLINE USAGE} {msg o} {
    
    # Trap the usage signal, print the message, and exit the application.
    # Note: Other errors are not caught and passed through to higher levels!
    puts stderr $msg
    exit 1
}

set deploy_dir $params(d)

if {$params(debug)} {
    logger::setlevel debug
}

if {$params(syslog)} {
    vessel::syslog::enable
}

coroutine vessel::supervisor::main_event_loop vessel::supervisor::main_event_loop_coro $deploy_dir
after idle vessel::supervisor::main_event_loop

set running true
vwait running
